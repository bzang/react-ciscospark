import {
  fromJS,
  Map,
  Record
} from 'immutable';

import {
  STORE_SPACES,
  REMOVE_SPACE,
  UPDATE_SPACE_READ,
  STORE_INITIAL_SPACE,
  UPDATE_SPACE_WITH_ACTIVITY,
  UPDATE_SPACE_STATUS,
  ACKNOWLEDGE_ACTIVITY,
  ADD_PARTICIPANT,
  REMOVE_PARTICIPANT,
  ADD_ACTIVITIES_TO_SPACE,
  ADD_PARTICIPANT_ACKNOWLEDGEMENT
} from './actions';

const Participant = Record({
  id: '',
  lastSeenActivityUuid: null,
  lastSeenActivityDate: null
});

export const Space = Record({
  latestActivity: null,
  avatar: '',
  displayName: '',
  id: null,
  url: '',
  locusUrl: '',
  activities: Map(),
  lastReadableActivityDate: '',
  lastSeenActivityDate: '',
  lastActivityTimestamp: '',
  conversationWebUrl: '',
  participants: Map(),
  lastAcknowledgedActivityId: '',
  type: '',
  published: '',
  tags: [],
  team: null,
  error: null,
  isDecrypting: false,
  isLocked: false,
  isOneOnOne: null,
  isHidden: false,
  isFetching: false,
  isLoadingHistory: false,
  isLoadingActivitiesSince: false
});

export const initialState = fromJS({
  byId: {}
});


export default function reducer(state = initialState, action) {
  switch (action.type) {
    case STORE_INITIAL_SPACE: {
      const {id} = action.payload;
      return state.setIn(['byId', id], new Space({
        id,
        isFetching: true
      }));
    }

    case STORE_SPACES: {
      const spaces = {};
      action.payload.spaces.forEach((s) => {
        spaces[s.id] = new Space(s);
      });
      return state.mergeDeepIn(['byId'], spaces);
    }

    case UPDATE_SPACE_STATUS: {
      const {id, status} = action.payload;
      return state.mergeDeepIn(['byId', id], status);
    }

    case UPDATE_SPACE_WITH_ACTIVITY: {
      const {space} = action.payload;
      if (state.hasIn(['byId', space.id])) {
        return state.mergeDeepIn(['byId', space.id], space);
      }
      return state;
    }

    case ACKNOWLEDGE_ACTIVITY: {
      const {spaceId, activityId} = action.payload;
      return state.setIn(['byId', spaceId, 'lastAcknowledgedActivityId'], activityId);
    }

    case UPDATE_SPACE_READ: {
      const {lastSeenDate, id} = action.payload;
      return state.setIn(['byId', id, 'lastSeenActivityDate'], lastSeenDate);
    }

    case REMOVE_SPACE:
      return state.deleteIn(['byId', action.payload.id]);

    case ADD_PARTICIPANT: {
      const {spaceId, participantId} = action.payload;
      return state.setIn(['byId', spaceId, 'participants', participantId], new Participant({id: participantId}));
    }

    case REMOVE_PARTICIPANT: {
      const {spaceId, participantId} = action.payload;
      return state.deleteIn(['byId', spaceId, 'participants', participantId]);
    }

    case ADD_PARTICIPANT_ACKNOWLEDGEMENT: {
      const {
        spaceId,
        participantId,
        lastSeenActivityUuid,
        lastSeenActivityDate
      } = action.payload;
      return state.mergeDeepIn(['byId', spaceId, 'participants', participantId], {
        lastSeenActivityUuid,
        lastSeenActivityDate
      });
    }

    case ADD_ACTIVITIES_TO_SPACE: {
      const {activities, spaceId} = action.payload;
      const list = {};
      activities.forEach((a) => {
        list[a.id] = a.published;
      });
      return state.mergeIn(['byId', spaceId, 'activities'], list);
    }

    default:
      return state;
  }
}
