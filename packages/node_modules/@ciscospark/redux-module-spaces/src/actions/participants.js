import isEmail from 'validator/lib/isEmail';

import {storeUser} from '@ciscospark/redux-module-user';

import {updateSpaceStatus} from './spaces';

// Participant management actions
export const ADD_PARTICIPANT = 'spaces/ADD_PARTICIPANT';
export const REMOVE_PARTICIPANT = 'spaces/REMOVE_PARTICIPANT';
export const ADD_PARTICIPANT_ACKNOWLEDGEMENT = 'spaces/ADD_PARTICIPANT_ACKNOWLEDGEMENT';

function addParticipant(spaceId, participantId) {
  return {
    type: ADD_PARTICIPANT,
    payload: {
      spaceId,
      participantId
    }
  };
}

function removeParticipant(spaceId, participantId) {
  return {
    type: REMOVE_PARTICIPANT,
    payload: {
      spaceId,
      participantId
    }
  };
}

export function addParticipantAcknowledgement({
  spaceId,
  participantId,
  activityId,
  lastSeenTimestamp
}) {
  return {
    type: ADD_PARTICIPANT_ACKNOWLEDGEMENT,
    payload: {
      spaceId,
      participantId,
      activityId,
      lastSeenTimestamp
    }
  };
}

/**
 * Adds participant to the conversation on the server
 *
 * @export
 * @param {object} sparkInstance
 * @param {object} options
 * @param {object} options.spaceId
 * @param {object} options.conversation
 * @param {object|string} options.participant the full participant object (js-sdk required)
 *                                    if string, must be an email address
 * @returns {function} Thunk
 */
export function addParticipantToSpace(sparkInstance, {spaceId, conversation, participant}) {
  return (dispatch) => {
    let participantObject = participant;
    if (typeof participant === 'string') {
      if (isEmail(participant)) {
        participantObject = {
          id: `inflight-${participant}`,
          emailAddress: participant
        };
      }
      else {
        const error = new Error('An email is required for string values of \'participant\' parameter.');
        dispatch(updateSpaceStatus(spaceId, {error}));
        return error;
      }
    }
    // Add participant to users store
    dispatch(storeUser(participantObject));
    // Add participant ID to space
    dispatch(addParticipant(spaceId, participantObject.id));

    return sparkInstance.internal.conversation.add(conversation, participantObject)
      .catch((error) =>
        dispatch(updateSpaceStatus(spaceId, {error})));
  };
}

/**
 * Removes a participant from the space on the server
 *
 * @export
 * @param {object} sparkInstance
 * @param {object} options.conversation
 * @param {object} options.participant
 * @param {object} options.spaceId
 * @returns {function}
 */
export function removeParticipantFromSpace(sparkInstance, {conversation, spaceId, participant}) {
  return (dispatch) => {
    dispatch(removeParticipant(spaceId, participant.id));
    return sparkInstance.internal.conversation.leave(conversation, participant)
      .then(() =>
        // Remove will come as mercury event
        dispatch(updateSpaceStatus(spaceId, {error: null})))
      .catch((error) =>
        dispatch(updateSpaceStatus(spaceId, {error})));
  };
}
