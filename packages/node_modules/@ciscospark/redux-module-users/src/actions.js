export const STORE_CURRENT_USER = `users/STORE_CURRENT_USER`;
export const STORE_USER = `users/STORE_USER`;
export const STORE_USERS = `users/STORE_USERS`;
export const REQUEST_CURRENT_USER = `users/REQUEST_CURRENT_USER`;


function storeCurrentUser(user) {
  return {
    type: STORE_CURRENT_USER,
    payload: {
      user
    }
  };
}

function storeUser(user) {
  return {
    type: STORE_USER,
    payload: {
      user
    }
  };
}

function requestCurrentUser() {
  return {
    type: REQUEST_CURRENT_USER
  };
}

function requestUser(user) {
  return {
    type: REQUEST_CURRENT_USER,
    payload: {
      user
    }
  };
}

/**
 * Store an array of users
 *
 * @export
 * @param {Array} users
 * @returns {Object} action
 */
export function storeUsers(users) {
  return {
    type: STORE_USERS,
    payload: {
      users
    }
  };
}

/**
 * Get current user who has authenticated with access token
 *
 * @export
 * @param {Object} sparkInstance
 * @returns {Promise}
 */
export function getCurrentUser(sparkInstance) {
  return (dispatch, getStore) => {
    if (!getStore().get(`currentUserId`)) {
      dispatch(requestCurrentUser());
      sparkInstance.internal.user.get()
      .then((user) => {
        dispatch(storeCurrentUser(user));
        return Promise.resolve(user);
      })
      .catch((error) => Promise.reject(error));
    }
  };
}

/**
 * Retrieves user obect from the server
 *
 * @export
 * @param {Object} person
 * @param {String} person.toPersonEmail
 * @param {String} person.toPersonId
 * @param {Object} sparkInstance
 * @returns {Promise}
 */
export function getUser(person, sparkInstance) {
  return (dispatch, getStore) => {
    if (person) {
      const store = getStore();
      const {toPersonEmail, toPersonId} = person;
      const handleResponse = (user) => dispatch(storeUser(user));
      const handleError = (error) => Promise.reject(error);

      if (!store.has([`items`, toPersonEmail])
      && !store.has([`items`, toPersonId])) {
        if (toPersonEmail) {
          dispatch(requestUser({toPersonEmail}));
          return sparkInstance.people.list({email: toPersonEmail})
            .then((res) => res.items[0])
            .then(handleResponse)
            .catch(handleError);
        }
        else if (toPersonId) {
          return sparkInstance.people.get(toPersonId)
            .then(handleResponse)
            .catch(handleError);
        }

      }
    }
    return Promise.reject(new Error(`toPersonEmail or toPersonId is required`));
  };
}
