import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import {getDisplayName} from '@ciscospark/react-component-utils';
import {
  addParticipant,
  receiveMercuryActivity,
  receiveMercuryComment,
  removeParticipant,
  updateSpaceStatus
} from '@ciscospark/redux-module-spaces';

export default function wrapConversationMercury(WrappedComponent) {
  const injectedPropTypes = {
    addParticipant: PropTypes.func.isRequired,
    space: PropTypes.object.isRequired,
    mercury: PropTypes.object.isRequired,
    receiveMercuryActivity: PropTypes.func.isRequired,
    receiveMercuryComment: PropTypes.func.isRequired,
    removeParticipant: PropTypes.func.isRequired,
    spark: PropTypes.object.isRequired,
    updateSpaceStatus: PropTypes.func.isRequired
  };

  class ConversationMercuryComponent extends Component {
    componentDidMount() {
      this.listenToMercury(this.props);
    }

    componentWillReceiveProps(nextProps) {
      this.listenToMercury(nextProps);
    }

    shouldComponentUpdate(nextProps) {
      return nextProps !== this.props;
    }

    listenToMercury(props) {
      const {mercury, space, sparkInstance} = props;
      const mecuryConnected = mercury.getIn(['status', 'connected']);
      const {id, isListeningToMercury} = space;

      if (mecuryConnected && id && !isListeningToMercury) {
        this.listenToNewActivity(sparkInstance, id);
        this.props.updateSpaceStatus({
          id,
          status: {
            isListeningToMercury: true
          }
        });
      }
    }

    /**
     * Setup listeners for new activities
     *
     * @param {Object} sparkInstance
     * @param {String} spaceId
     */
    listenToNewActivity(sparkInstance, spaceId) {
      sparkInstance.internal.mercury.on('event:conversation.activity', (event) => {
        const {activity} = event.data;
        const {object, target, verb} = activity;
        // Ignore activity from other conversations
        if (target && target.id === spaceId) {
          if (object.objectType === 'activity') {
            this.props.receiveMercuryActivity(activity);
          }
          else if (object.objectType === 'person') {
            if (verb === 'add') {
              this.props.addParticipant(object);
            }
            else if (verb === 'leave') {
              this.props.removeParticipant(object);
            }
            this.props.receiveMercuryComment(activity);
          }
          else {
            this.props.receiveMercuryComment(activity);
          }
        }
      });
    }

    render() {
      return <WrappedComponent {...this.props} />;
    }
  }

  ConversationMercuryComponent.displayName = `ConversationMercuryComponent(${getDisplayName(WrappedComponent)})`;
  ConversationMercuryComponent.WrappedComponent = WrappedComponent;

  ConversationMercuryComponent.propTypes = injectedPropTypes;

  return connect(
    null,
    (dispatch) => bindActionCreators({
      addParticipant,
      receiveMercuryActivity,
      receiveMercuryComment,
      removeParticipant,
      updateSpaceStatus
    }, dispatch)
  )(ConversationMercuryComponent);
}
