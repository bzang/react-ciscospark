import {compose, withHandlers, lifecycle, setDisplayName} from 'recompose';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import {saveAs} from 'file-saver';
import {bufferToBlob} from '@ciscospark/react-component-utils';
import {retrieveSharedFile} from '@ciscospark/redux-module-share';

function getSharedFileFromStore(props) {
  return (fileUrl) => props.share.get(['files', fileUrl]);
}

function getThumbnailImage(props) {
  return (fileObject) => {
    const {image} = fileObject;
    if (fileObject.mimeType === 'image/gif' && fileObject.url) {
      props.retrieveFile(fileObject);
    }
    else if (image && (image.url && !props.getSharedFileFromStore(image.url) || image.scr)) {
      props.retrieveFile(image);
    }
  };
}

function retrieveFile(props) {
  return (file) => props.retrieveSharedFile(file, props.spark);
}

function handleDownloadClick(props) {
  return (fileObject) => {
    const cachedFile = props.getSharedFileFromStore(fileObject.url);
    if (cachedFile && cachedFile.blob) {
      saveAs(cachedFile.blob, fileObject.displayName);
    }
    else {
      props.retrieveSharedFile(fileObject, props.spark)
        .then((file) => {
          const {blob} = bufferToBlob(file);
          saveAs(blob, file.name);
        });
    }
  };
}

export default compose(
  setDisplayName('FileDownloader'),
  connect(
    (state) => ({
      share: state.share,
      sparkInstance: state.spark.get('spark')
    }),
    (dispatch) => bindActionCreators({
      retrieveSharedFile
    }, dispatch)
  ),
  lifecycle({
    componentDidMount() {
      const {files} = this.props;
      files.forEach((file) => {
        this.props.getThumbnailImage(file);
      });
    }
  }),
  withHandlers({
    onDownloadClick: handleDownloadClick,
    getSharedFileFromStore,
    retrieveFile,
    getThumbnailImage
  })
);
