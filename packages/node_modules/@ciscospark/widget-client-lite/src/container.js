import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import classNames from 'classnames';
import {autobind} from 'core-decorators';

import SpaceWidget from '@ciscospark/widget-space';
import RecentsWidget from '@ciscospark/widget-recents';
import LoadingScreen from '@ciscospark/react-component-loading-screen';

import {
  storeSpace,
  setActiveSpace
} from './actions';
import {getClientDetails} from './selector';
import styles from './styles.css';

export class ClientLite extends Component {
  shouldComponentUpdate() {
    return true;
  }

  componentWillUnmount() {
    this.props.sparkInstance.internal.mercury.disconnect().then(() => this.props.removeWidget());
  }

  @autobind
  handleRecentsEvents(name, {data}) {
    const {props} = this;
    if (name === 'rooms:selected') {
      if (!props.client.getIn(['spaces', data.id])) {
        props.storeSpace(
          data.id,
          <SpaceWidget
            accessToken={props.accessToken}
            key={data.id}
            spaceId={data.id}
          />
        );
      }
      props.setActiveSpace(data.id);
    }
  }

  render() {
    const {
      handleRecentsEvents,
      props
    } = this;
    const {
      sparkInstance,
      activeSpaceId,
      openSpaces
    } = props;

    const allSpaces = openSpaces.toList().map((space) => {
      const isVisible = space.props.spaceId === activeSpaceId
        ? {display: 'block'} : {display: 'none'};
      return (
        <div key={space.spaceId} style={isVisible}>
          {space}
        </div>
      );
    }).toJS();

    if (sparkInstance) {
      return (
        <div className={classNames(styles.clientContainer)}>
          <div className={classNames(styles.recentsContainer)}>
            <RecentsWidget
              injectProvider={false}
              onEvent={handleRecentsEvents}
            />
          </div>
          <div className={classNames(styles.spaceContainer)}>
            {
              !activeSpaceId &&
              <div>NO SPACE SELECTED</div>
            }
            {allSpaces}
          </div>
        </div>
      );
    }

    return <LoadingScreen />;
  }
}

const injectedPropTypes = {
  accessToken: PropTypes.string,
  sparkInstance: PropTypes.object,
  storeSpace: PropTypes.func,
  setActiveSpace: PropTypes.func,
  client: PropTypes.object
};

ClientLite.propTypes = {
  ...injectedPropTypes
};

function mapStateToProps(state, props) {
  return getClientDetails(state, props);
}

export default connect(
  mapStateToProps,
  (dispatch) => bindActionCreators({
    storeSpace,
    setActiveSpace
  }, dispatch)
)(ClientLite);
