import {compose, withHandlers} from 'recompose';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';

import {constructFiles} from '@ciscospark/react-component-utils';
import {addFiles, removeFile} from '@ciscospark/redux-module-messaging';

function handleFileChange(props) {
  return (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (e.target.files.length) {
      const {
        activity,
        space,
        sparkInstance
      } = props;

      const files = constructFiles(e.target.files);
      props.addFiles(sparkInstance, {conversation: space.conversation, message: activity, files});

      // Clear the value of the input so the same file can be added again.
      e.target.value = '';
    }
  };
}

function handleFileRemove(props) {
  return (id) => {
    props.removeFile(id, props.activity);
  };
}

export default compose(
  connect(
    (state) => ({
      files: state.activity.files,
      sparkInstance: state.spark.get('spark'),
      space: state.space
    }),
    (dispatch) => bindActionCreators({
      addFiles,
      removeFile
    }, dispatch)
  ),
  withHandlers({
    handleFileRemove,
    handleFileChange
  })
);
