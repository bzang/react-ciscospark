import {compose, lifecycle, withHandlers} from 'recompose';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';

import {
  NOTIFICATION_TYPE_POST,
  createNotification
} from '@ciscospark/react-container-notifications';
import {removeInflightMessage} from '@ciscospark/redux-module-messaging';
import wrapConversationMercury from '@ciscospark/react-hoc-conversation-mercury';

import {
  updateWidgetState,
  updateHasNewMessage,
  confirmDeleteActivity
} from '../actions';

/**
 * Setup listeners for new activities
 *
 * @param {Object} props
 */
function listenToNewActivity(props) {
  const {
    currentUser,
    space,
    widgetMessage,
    sparkInstance
  } = props;
  if (space && !widgetMessage.get('isListeningToActivity')) {
    if (currentUser) {
      props.updateWidgetState({isListeningToActivity: true});
      sparkInstance.internal.mercury.on('event:conversation.activity', ({data}) => {
        const {activity} = data;
        const isSelf = activity.actor.id === currentUser.id;
        if (activity.target &&
          activity.target.id === space.id &&
          ['share', 'post'].includes(activity.verb)) {
          if (isSelf) {
            // Remove the in flight activity that matches this
            props.removeInflightActivity(activity.clientTempId);
          }
          else {
            props.createNotification(activity.url, NOTIFICATION_TYPE_POST);
            props.updateHasNewMessage(true);
          }
        }
      });
    }
  }
}

function handleActivityDelete(props) {
  return (activityId) => {
    props.confirmDeleteActivity(activityId);
  };
}

export default compose(
  wrapConversationMercury,
  withHandlers({
    handleActivityDelete
  }),
  connect(
    null,
    (dispatch) => bindActionCreators({
      updateWidgetState,
      removeInflightMessage,
      updateHasNewMessage,
      createNotification,
      confirmDeleteActivity
    }, dispatch)
  ),
  lifecycle({
    componentDidMount() {
      listenToNewActivity(this.props);
    },
    componentWillReceiveProps(nextProps) {
      listenToNewActivity(nextProps);
    }
  })
);
