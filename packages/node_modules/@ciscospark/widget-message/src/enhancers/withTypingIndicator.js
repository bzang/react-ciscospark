import {compose, lifecycle} from 'recompose';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';

import {setTyping} from '@ciscospark/redux-module-indicators';

import {updateWidgetState} from '../actions';


/**
 * Setup listeners for typing events
 *
 * @param {Object} props
 */
function listenToTypingEvents(props) {
  const {
    sparkInstance,
    space,
    widgetMessage
  } = props;
  if (!widgetMessage.get('isListeningToTyping')) {
    props.updateWidgetState({isListeningToTyping: true});
    sparkInstance.internal.mercury.on('event:status.start_typing', (event) => {
      if (event.data.conversationId === space.id) {
        props.setTyping(event.data.actor.id, true);
      }
    });

    sparkInstance.internal.mercury.on('event:status.stop_typing', (event) => {
      if (event.data.conversationId === space.id) {
        props.setTyping(event.data.actor.id, false);
      }
    });
  }
}


export default compose(
  connect(
    null,
    (dispatch) => bindActionCreators({
      updateWidgetState,
      setTyping
    }, dispatch)
  ),
  lifecycle({
    componentDidMount() {
      listenToTypingEvents(this.props);
    },
    componentWillReceiveProps(nextProps) {
      listenToTypingEvents(nextProps);
    }
  })
);
