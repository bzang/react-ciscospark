import {compose, lifecycle} from 'recompose';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import {has} from 'lodash';

import {loadActivitiesSince} from '@ciscospark/redux-module-spaces';

import {updateWidgetState} from '../actions';

/**
 * Listens for mercury buffer state events and
 * fires off actions based on them
 * @param {object} props
 */
function listenToBufferState(props) {
  const {
    widgetMessage,
    sparkInstance,
    space
  } = props;

  if (space && !widgetMessage.get('isListeningToBufferState')) {
    props.updateWidgetState({isListeningToBufferState: true});

    sparkInstance.internal.mercury.on('event:mercury.buffer_state', (event) => {
      const {
        lastActivity
      } = props;
      if (has(event, 'data.bufferState.conversation') && event.data.bufferState.conversation === 'UNKNOWN') {
        // Mercury does not contain enough information about the conversation, refetch
        const sinceDate = lastActivity.published || null;
        props.loadActivitiesSince(sparkInstance, {spaceId: space.id, sinceDate});
      }
    });
  }
}

export default compose(
  connect(
    null,
    (dispatch) => bindActionCreators({
      updateWidgetState,
      loadActivitiesSince
    }, dispatch)
  ),
  lifecycle({
    componentDidMount() {
      listenToBufferState(this.props);
    },
    componentWillReceiveProps(nextProps) {
      listenToBufferState(nextProps);
    }
  })
);
