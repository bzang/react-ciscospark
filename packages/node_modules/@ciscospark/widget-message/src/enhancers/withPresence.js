import {compose, lifecycle} from 'recompose';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';

import {
  subscribeToPresenceUpdates,
  unsubscribeFromPresenceUpdates
} from '@ciscospark/redux-module-presence';

/**
 * Setup listener to subscribe to
 *
 * @param {any} props
 */
function listenForPresence(props) {
  const {
    sparkInstance,
    presence,
    space
  } = props;
  if (space) {
    const {participants} = space;
    if (participants) {
      const newUserIds = participants.filter((subject) => !presence.hasIn(['items', subject]));
      if (newUserIds.length > 0) {
        this.props.subscribeToPresenceUpdates(newUserIds, sparkInstance);
      }
    }
  }
}

export default compose(
  connect(
    null,
    (dispatch) => bindActionCreators({
      subscribeToPresenceUpdates,
      unsubscribeFromPresenceUpdates
    }, dispatch)
  ),
  lifecycle({
    componentDidMount() {
      listenForPresence(this.props);
    },
    componentWillReceiveProps(nextProps) {
      listenForPresence(nextProps);
    },
    componentWillUnmount() {
      const {
        sparkInstance,
        space
      } = this.props;
      this.props.unsubscribeFromPresenceUpdates(sparkInstance, space.participants);
    }
  })
);
