import {Record} from 'immutable';
import {combineReducers} from 'redux';

import spaces from '@ciscospark/redux-module-spaces';
import activities from '@ciscospark/redux-module-activities';
import message from '@ciscospark/redux-module-messaging';
import avatar from '@ciscospark/redux-module-avatar';
import flags from '@ciscospark/redux-module-flags';
import indicators from '@ciscospark/redux-module-indicators';
import {reducer as notifications} from '@ciscospark/react-container-notifications';
import {reducer as messageComposer} from '@ciscospark/react-container-message-composer';
import presence from '@ciscospark/redux-module-presence';
import share from '@ciscospark/redux-module-share';
import users from '@ciscospark/redux-module-users';
import spark from '@ciscospark/react-redux-spark';
import features from '@ciscospark/redux-module-features';

import {
  UPDATE_WIDGET_STATUS,
  SET_SCROLL_POSITION,
  CONFIRM_DELETE_ACTIVITY,
  HIDE_DELETE_MODAL
} from './actions';


export const initialState = Record({
  deletingActivityId: '',
  spaceId: '',
  scrollPosition: {},
  isListeningToActivity: false,
  isListeningToBufferState: false,
  isListeningToTyping: false,
  hasAlertModal: false,
  hasScrollToBottomButton: false,
  hasNewMessage: false,
  hasScrolledUp: false
});

export function reducer(state = initialState, action) {
  switch (action.type) {
    case UPDATE_WIDGET_STATUS:
      return state.mergeIn(['status'], action.payload);

    case SET_SCROLL_POSITION:
      return state.set('scrollPosition', action.payload.scrollPosition);

    case CONFIRM_DELETE_ACTIVITY:
      return state
        .set('deleteActivityId', action.payload.deletingActivityId)
        .setIn(['status', 'hasAlertModal'], true);

    case HIDE_DELETE_MODAL:
      return state
        .set('deleteActivityId', null)
        .setIn(['status', 'hasAlertModal'], false);

    default:
      return state;
  }
}

export const reducers = {
  message,
  avatar,
  spaces,
  activities,
  flags,
  indicators,
  notifications,
  share,
  users,
  spark,
  messageComposer,
  features,
  presence,
  widgetMessage: reducer
};

export default combineReducers(reducers);
