import {createSelector} from 'reselect';
import {FEATURE_MENTIONS} from '@ciscospark/redux-module-features';

const getSparkStatus = (state) => state.spark.get('status');
const getSpaces = (state) => state.spaces.get('byId');
const getUsers = (state) => state.users.get('byId');
const getActivities = (state) => state.activities;
const getFeatures = (state) => state.features;
const getSpaceId = (state, ownProps) => ownProps.spaceId || state.widgetMessage.get('spaceId');
const getCurrentUser = (state) => state.users.get(['byId', state.users.get('currentUserId')]);

const getSpace = createSelector(
  [getSpaces, getSpaceId],
  (spaces, spaceId) => spaces.get(spaceId)
);

const getParticipants = createSelector(
  [getSpace, getUsers],
  (space, users) => {
    if (space && space.participants) {
      // Merge user details with space specific user details
      return space.participants
        .map((user, id) => users.get(id).merge(user));
    }
    return {};
  }
);

const getToUserFromSpace = createSelector(
  [getSpace, getUsers, getCurrentUser],
  (space, users, currentUser) => {
    if (!space.participants || !currentUser) {
      return null;
    }
    return space.participants.find((user) =>
      user.get('id') !== currentUser.id);
  }
);

const getSpaceActivities = createSelector(
  [getSpace, getActivities],
  (space, activities) => space.activities.map((details, id) => activities.get(id))
);


const getMessageWidgetProps = createSelector(
  [
    getSparkStatus,
    getParticipants,
    getSpaceActivities,
    getSpace,
    getSpaceId,
    getFeatures,
    getToUserFromSpace
  ],
  (sparkState, participants, activities, space, spaceId, features, toUser) => {
    const propsObject = {
      activities: activities.toJS(),
      activityCount: activities.count(),
      lastActivity: activities.last(),
      firstActivity: activities.first(),
      participants,
      sparkState: sparkState.toJS(),
      showMentions: features.getIn(['items', FEATURE_MENTIONS]),
      toUser,
      spaceId,
      space
    };
    return propsObject;
  }
);


export default getMessageWidgetProps;
