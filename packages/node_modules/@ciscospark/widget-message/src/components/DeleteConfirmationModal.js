import {compose, branch, setDisplayName, renderNothing} from 'recompose';
import {autobind} from 'core-decorators';
import React, {Component} from 'react';
import {connect} from 'react-redux';
import PropTypes from 'prop-types';
import {intlShape} from 'react-intl';
import {bindActionCreators} from 'redux';

import ConfirmationModal from '@ciscospark/react-component-confirmation-modal';

import {
  deleteActivityAndDismiss,
  hideDeleteModal
} from '../actions';
import messages from '../messages';

const propTypes = {
  // Injected props
  hideDeleteModal: PropTypes.func.isRequired,
  intl: intlShape.isRequired
};

class DeleteConfirmationModal extends Component {
  /**
   * Does the actual deletion of the activity after confirmation modal
   */
  @autobind
  handleConfirmActivityDelete() {
    const {props} = this;
    const {
      activities,
      space,
      sparkInstance,
      widgetMessage
    } = props;

    const activityId = widgetMessage.get('deletingActivityId');

    const activity = Object.values(activities).find((act) => act.id === activityId);
    if (activity) {
      props.deleteActivityAndDismiss(sparkInstance, {conversation: space.conversation, activity});
    }
    else {
      props.hideDeleteModal();
    }
  }


  /**
   * Dismisses the confirmation modal
   */
  @autobind
  handleCancelActivityDelete() {
    this.props.hideDeleteModal();
  }

  render() {
    const {formatMessage} = this.props.intl;
    return (
      <ConfirmationModal
        actionButtonLabel={formatMessage(messages.deleteButtonLabel)}
        body={formatMessage(messages.deleteAlertBody)}
        cancelButtonLabel={formatMessage(messages.cancelButtonLabel)}
        onClickActionButton={this.handleConfirmActivityDelete}
        onClickCancelButton={this.handleCancelActivityDelete}
        title={formatMessage(messages.deleteAlertTitle)}
      />
    );
  }
}

DeleteConfirmationModal.propTypes = propTypes;


const hideAlertModal = ({widgetMessage}) => !widgetMessage.hasAlertModal;

export default compose(
  setDisplayName('DeleteConfirmationModal'),
  connect(
    null,
    (dispatch) => bindActionCreators({
      hideDeleteModal,
      deleteActivityAndDismiss
    }, dispatch)
  ),
  // Do not render when there is no alert
  branch(
    hideAlertModal,
    renderNothing()
  )
)(DeleteConfirmationModal);

