import {deleteActivity} from '@ciscospark/redux-module-spaces';


export const UPDATE_WIDGET_STATUS = 'widget-message/UPDATE_WIDGET_STATUS';
export const SET_SCROLL_POSITION = 'widget-message/SET_SCROLL_POSITION';
export const CONFIRM_DELETE_ACTIVITY = 'widget-message/CONFIRM_DELETE_ACTIVITY';
export const HIDE_DELETE_MODAL = 'widget-message/HIDE_DELETE_MODAL';

export function updateWidgetStatus({
  isListeningToActivity,
  isListeningToBufferState,
  isListeningToTyping,
  hasAlertModal,
  hasScrollToBottomButton,
  hasNewMessage
}) {
  return {
    type: UPDATE_WIDGET_STATUS,
    payload: {
      isListeningToActivity,
      isListeningToBufferState,
      isListeningToTyping,
      hasAlertModal,
      hasScrollToBottomButton,
      hasNewMessage
    }
  };
}

export function setScrollPosition(scrollPosition) {
  return {
    type: SET_SCROLL_POSITION,
    payload: {
      scrollPosition
    }
  };
}

export function confirmDeleteActivity(activityId) {
  return {
    type: CONFIRM_DELETE_ACTIVITY,
    payload: {
      deletingActivityId: activityId
    }
  };
}


export function hideDeleteModal() {
  return {
    type: HIDE_DELETE_MODAL
  };
}

export function showScrollToBottomButton(isVisible) {
  return (dispatch) => {
    dispatch(updateWidgetStatus({
      hasScrollToBottomButton: isVisible
    }));
  };
}

export function updateHasNewMessage(hasNew) {
  return (dispatch) => {
    dispatch(updateWidgetStatus({
      hasNewMessage: hasNew
    }));
  };
}

/**
 * Deletes an activity from a space and dismisses the confirmation modal
 *
 * @export
 * @param {Object} sparkInstance
 * @param {Object} options
 * @param {Object} options.convoInstance
 * @param {string} options.spaceId
 * @param {Object} options.activity
 * @returns {function} Thunk
 */
export function deleteActivityAndDismiss(sparkInstance, {conversation, spaceId, activity}) {
  return (dispatch) => {
    dispatch(deleteActivity(sparkInstance, {conversation, spaceId, activity}))
      .then(() => {
        dispatch(hideDeleteModal());
      });
  };
}
