import {
  Map,
  Record,
  OrderedMap
} from 'immutable';

import {
  ADD_FILES_TO_MESSAGE,
  ADD_INFLIGHT_MESSAGE,
  RESET_MESSAGE,
  REMOVE_FAILED_MESSAGE,
  REMOVE_FILE_FROM_MESSAGE,
  REMOVE_INFLIGHT_MESSAGE,
  SAVE_SHARE,
  SUBMIT_MESSAGE_START,
  SUBMIT_MESSAGE_FAILURE,
  UPDATE_MESSAGE_STATUS,
  STORE_MESSAGE_TEXT
} from './actions';

const ActivityObject = Record({
  mentions: [],
  content: undefined,
  displayName: ''
});

export const initialState = Record({
  inFlightMessages: OrderedMap(),
  messageFailures: OrderedMap(),
  share: undefined,
  files: OrderedMap(),
  text: '',
  cleanText: '',
  object: ActivityObject(),
  isSending: false,
  isUploadingShare: false,
  isTyping: false
});

export default function reducer(state = initialState, action) {
  switch (action.type) {
    case ADD_FILES_TO_MESSAGE: {
      const files = action.payload.files.reduce((o, currentFile) =>
        Object.assign({}, o, {
          [currentFile.id]: currentFile
        }),
      {});

      return state.mergeIn(['files'], files);
    }

    case ADD_INFLIGHT_MESSAGE: {
      const {activity} = action.payload;
      const inFlightMessage = new Map([[activity.clientTempId, activity]]);
      return state.mergeIn(['inFlightMessages'], inFlightMessage);
    }

    case REMOVE_FAILED_MESSAGE: {
      const activityId = action.payload.id;
      return state.deleteIn(['messageFailures', activityId]);
    }

    case REMOVE_FILE_FROM_MESSAGE: {
      return state.deleteIn(['files', action.payload.id]);
    }

    case REMOVE_INFLIGHT_MESSAGE: {
      const activityId = action.payload.id;
      return state.deleteIn(['inFlightMessages', activityId]);
    }

    case RESET_MESSAGE: {
      const inFlightMessages = state.get('inFlightMessages');
      const messageFailures = state.get('messageFailures');
      return initialState
        .set('inFlightMessages', inFlightMessages)
        .set('messageFailures', messageFailures);
    }

    case SAVE_SHARE: {
      return state.set('share', action.payload.share);
    }

    case SUBMIT_MESSAGE_START: {
      return state
      // Clear the text from the input
        .set('object', ActivityObject())
        .set('isSending', true);
    }

    case SUBMIT_MESSAGE_FAILURE: {
      const {activity} = action.payload;
      const failedActivity = new Map([[activity.clientTempId, activity]]);
      return state
        .deleteIn(['inFlightMessages', activity.id])
        .mergeIn(['messageFailures'], failedActivity);
    }

    case UPDATE_MESSAGE_STATUS: {
      const {isSending, isTyping, isUploadingShare} = action.payload.status;
      return state.mergeIn({isSending, isTyping, isUploadingShare});
    }

    case STORE_MESSAGE_TEXT:
      return state
        .set('text', action.payload.text)
        .set('cleanText', action.payload.cleanText);

    default:
      return state;
  }
}
