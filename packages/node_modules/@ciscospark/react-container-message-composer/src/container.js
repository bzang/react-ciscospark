import {debounce} from 'lodash';
import {autobind} from 'core-decorators';
import {compose} from 'recompose';
import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import classNames from 'classnames';
import {
  MentionsInput,
  Mention
} from 'react-mentions';

import {
  submitMessage,
  storeActivityText
} from '@ciscospark/redux-module-messaging';
import {searchForUser} from '@ciscospark/redux-module-search';
import PresenceAvatar from '@ciscospark/react-container-presence-avatar';
import FileUploader from '@ciscospark/react-container-file-uploader';

import {setUserTyping} from './actions';
import styles from './styles.css';
import mentionStyles from './mentions.css';
import getProps from './selector';

import enhancer from './enhancers';


const propTypes = {
  // From ownProps
  onSubmit: PropTypes.func.isRequired,
  // eslint-disable-reason used in selector
  // eslint-disable-next-line react/no-unused-prop-types
  spaceId: PropTypes.string.isRequired,
  placeholder: PropTypes.string,
  showMentions: PropTypes.bool,
  // From selector
  participants: PropTypes.object.isRequired,
  sparkInstance: PropTypes.object.isRequired,
  currentUser: PropTypes.object.isRequired,
  // From store
  space: PropTypes.object.isRequired,
  message: PropTypes.object.isRequired,
  messageComposer: PropTypes.object.isRequired,
  // From actions
  setUserTyping: PropTypes.func.isRequired,
  submitMessage: PropTypes.func.isRequired
};

const defaultProps = {
  placeholder: '',
  showMentions: false
};

export class MessageComposer extends Component {
  static renderSuggestion(entry, search, highlightedDisplay) {
    return (
      <div className={mentionStyles.content}>
        <div className={mentionStyles.avatar}>
          <PresenceAvatar avatarId={entry.id} name={entry.display} />
        </div>
        <div className={mentionStyles.highlightedDisplay}>
          {highlightedDisplay}
        </div>
      </div>
    );
  }

  constructor(props) {
    super(props);
    this.timerId = 0;
    this.setUserStartTyping = debounce(this.setUserStartTyping, 500, {leading: true, trailing: false});
  }

  shouldComponentUpdate(nextProps) {
    return this.props !== nextProps;
  }

  @autobind
  handleKeyDown(e) {
    if (e.keyCode === 13 && !e.shiftKey && !e.altKey && !e.ctrlKey && !e.metaKey) {
      this.handleSubmit();
      e.preventDefault();
    }
  }

  @autobind
  handleSubmit() {
    const {
      message,
      space,
      sparkInstance,
      currentUser,
      onSubmit
    } = this.props;

    if (message.text.length === 0 && message.files.size === 0) {
      return;
    }
    this.props.setUserTyping(false);
    this.props.submitMessage(sparkInstance, {
      conversation: space.conversation,
      user: currentUser,
      message
    });

    if (typeof onSubmit === 'function') {
      onSubmit();
    }
  }

  @autobind
  searchForMention(term) {
    const {
      participants,
      currentUser
    } = this.props;
    let filteredParticipants = [];

    if (participants && participants.count()) {
      filteredParticipants = participants.filter((p) =>
        currentUser.id !== p.id &&
        (!term || term && p.display.toLowerCase().includes(term.toLowerCase())));
    }

    return filteredParticipants;
  }

  render() {
    let text;
    const {
      message,
      messageComposer,
      placeholder,
      space,
      showMentions
    } = this.props;

    if (message && message.has('text')) {
      ({text} = message);
    }

    const textAreaFocusStyle = messageComposer.hasTextAreaFocus ? styles.hasFocus : '';
    const mentionMarkup = '@{__display__}|__id__|';

    // Only show mentions if this is not a one on one convo
    const getData = showMentions && !space.isOneOnOne ? this.searchForMention : () => {};
    return (
      <div className={classNames('ciscospark-message-composer', styles.messageComposer, textAreaFocusStyle)}>
        <FileUploader onSubmit={this.handleSubmit} />
        <div className={classNames('ciscospark-textarea-container')}>
          <MentionsInput
            classNames={mentionStyles}
            markup={mentionMarkup}
            onBlur={this.handleTextAreaBlur}
            onChange={this.handleTextChange}
            onFocus={this.handleTextAreaFocus}
            onKeyDown={this.handleKeyDown}
            onSubmit={this.handleSubmit}
            placeholder={placeholder}
            rows={1}
            value={text}
          >
            <Mention
              className={mentionStyles.mentions__mention}
              data={getData}
              renderSuggestion={MessageComposer.renderSuggestion}
              trigger="@"
            />
          </MentionsInput>
        </div>
      </div>
    );
  }
}


MessageComposer.propTypes = propTypes;
MessageComposer.defaultProps = defaultProps;

export default compose(
  connect(
    getProps,
    (dispatch) => bindActionCreators({
      setUserTyping,
      submitMessage,
      searchForUser,
      storeActivityText
    }, dispatch)
  ),
  ...enhancer
)(MessageComposer);
