import {compose, withHandlers} from 'recompose';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';

import {
  updateUserTyping,
  focusTextArea,
  blurTextArea
} from '../actions';

function setUserTyping(props) {
  return (isTyping) => {
    const {
      space,
      sparkInstance,
      messageComposer
    } = props;
    if (messageComposer.getIn(['status', 'isTyping']) !== isTyping) {
      props.updateUserTyping(sparkInstance, {isTyping, conversation: space.conversation});
    }
  };
}

function setUserStopTyping(props) {
  return () => props.setUserTyping(false);
}

function setUserStartTyping(props) {
  return () => props.setUserTyping(false);
}


function handleTextChange(props) {
  let timerId;
  return (e, newValue, newValuePlainText) => {
    let {value} = e.target;
    if (newValue && newValue.length) {
      value = newValue;
    }

    props.storeActivityText(value, newValuePlainText);

    // TODO: THIS MAY NOT WORK
    clearTimeout(timerId);
    if (value === '') {
      props.setUserStopTyping();
    }
    else {
      if (!props.activity.getIn(['status', 'isTyping'])) {
        props.setUserStartTyping();
      }
      timerId = setTimeout(this.setUserStopTyping, 3000);
    }
  };
}

function handleTextAreaBlur(props) {
  return () => {
    const {
      space,
      sparkInstance
    } = props;
    props.blurTextArea();
    props.setUserTyping(sparkInstance, {isTyping: false, conversation: space.conversation});
  };
}

function handleTextAreaFocus(props) {
  return () => props.focusTextArea();
}

export default compose(
  connect(
    null,
    (dispatch) => bindActionCreators({
      focusTextArea,
      blurTextArea,
      updateUserTyping
    }, dispatch)
  ),
  withHandlers({
    handleTextAreaBlur,
    handleTextAreaFocus,
    handleTextChange,
    setUserStopTyping,
    setUserStartTyping,
    setUserTyping
  })
);
