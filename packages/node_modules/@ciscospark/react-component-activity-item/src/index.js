import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import ActivityPost from '@ciscospark/react-component-activity-post';
import ActivityShareFiles from '@ciscospark/react-component-activity-share-files';
import ActivitySystemMessage, {SYSTEM_MESSAGE_VERBS} from '@ciscospark/react-component-activity-system-message';
import withFileDownloader from '@ciscospark/react-hoc-file-downloader';

import styles from './styles.css';

const POST_VERB = 'post';
const SHARE_VERB = 'share';

const ActivityShare = withFileDownloader(ActivityShareFiles);

const propTypes = {
  activity: PropTypes.shape({
    content: PropTypes.string,
    displayName: PropTypes.string,
    files: PropTypes.shape({
      items: PropTypes.array
    })
  }).isRequired,
  verb: PropTypes.string.isRequired
};

function ActivityItem(props) {
  const {
    activity,
    verb
  } = props;

  let itemComponent = '';


  if (verb === POST_VERB) {
    itemComponent = (
      <ActivityPost
        content={activity.content}
        displayName={activity.displayName}
        renderedComponent={activity.component}
        {...props}
      />
    );
  }
  else if (verb === SHARE_VERB) {
    itemComponent = (
      <ActivityShare
        content={activity.content}
        displayName={activity.displayName}
        files={activity.files.items}
        {...props}
      />
    );
  }
  else if (SYSTEM_MESSAGE_VERBS.indexOf(verb) !== -1) {
    itemComponent = <ActivitySystemMessage {...props} />;
  }

  return (
    <div className={classNames('ciscospark-activity-item-container', styles.activityItemContainer)}>
      {itemComponent}
    </div>
  );
}

ActivityItem.propTypes = propTypes;

export default ActivityItem;
