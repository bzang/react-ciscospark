import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import classNames from 'classnames';
import {autobind} from 'core-decorators';

import {events as metricEvents} from '@ciscospark/react-redux-spark-metrics';
import MessageWidget from '@ciscospark/widget-message';
import MeetWidget from '@ciscospark/widget-meet';
import RosterWidget from '@ciscospark/widget-roster';
import TitleBar from '@ciscospark/react-component-title-bar';
import Button from '@ciscospark/react-component-button';
import LoadingScreen from '@ciscospark/react-component-loading-screen';
import Timer from '@ciscospark/react-component-timer';
import ErrorDisplay from '@ciscospark/react-component-error-display';

import {getFeature} from '@ciscospark/redux-module-features';
import {getCurrentUser} from '@ciscospark/redux-module-user';
import {fetchAvatar} from '@ciscospark/redux-module-avatar';
import {connectToMercury} from '@ciscospark/redux-module-mercury';
import {addError, removeError} from '@ciscospark/redux-module-errors';
import {
  ICON_TYPE_CONTACT,
  ICON_TYPE_MESSAGE_OUTLINE,
  ICON_TYPE_VIDEO_OUTLINE,
  ICON_TYPE_WAFFLE
} from '@ciscospark/react-component-icon';

import ActivityMenu from './components/activity-menu';

import {
  getSpaceDetails,
  updateActivityType,
  updateSecondaryActivityType,
  storeActivityTypes,
  storeSpaceDetails,
  toggleActivityMenuVisible,
  updateWidgetStatus
} from './actions';
import messages from './messages';
import {getSpaceWidgetProps} from './selector';
import styles from './styles.css';
import {eventNames} from './events';

const ACTIVITY_TYPE_PRIMARY = `ACTIVITY_TYPE_PRIMARY`;
const ACTIVITY_TYPE_SECONDARY = `ACTIVITY_TYPE_SECONDARY`;
const DEFAULT_ACTIVITY = `message`;


export class SpaceWidget extends Component {

  constructor(props) {
    super(props);
    // Store activity types used in widget
    const DEFAULT_ACTIVITY_TYPES = [
      {
        displayName: `Message`,
        name: `message`,
        buttonClassName: styles.messageButton,
        iconClassName: ICON_TYPE_MESSAGE_OUTLINE,
        component: MessageWidget,
        spaceTypes: [`group`, `direct`],
        type: ACTIVITY_TYPE_PRIMARY
      },
      {
        displayName: `Call`,
        name: `meet`,
        buttonClassName: styles.meetButton,
        iconClassName: ICON_TYPE_VIDEO_OUTLINE,
        component: MeetWidget,
        spaceTypes: [`direct`, `group`],
        type: ACTIVITY_TYPE_PRIMARY,
        feature: {
          type: `developer`,
          key: `js-widgets-group-calling`
        }
      },
      {
        displayName: `Call`,
        name: `meet`,
        buttonClassName: styles.meetButton,
        iconClassName: ICON_TYPE_VIDEO_OUTLINE,
        component: MeetWidget,
        spaceTypes: [`direct`],
        type: ACTIVITY_TYPE_PRIMARY,
        feature: {
          type: `developer`,
          key: `js-widgets-group-calling`,
          // Hide this option if feature flag is set
          hide: true
        }
      },
      {
        displayName: `People`,
        name: `people`,
        buttonClassName: styles.peopleButton,
        iconClassName: ICON_TYPE_CONTACT,
        component: RosterWidget,
        spaceTypes: [`direct`, `group`],
        type: ACTIVITY_TYPE_SECONDARY,
        props: {
          onClickClose: this.handleSecondaryDismiss,
          onClickMenu: this.handleMenuClick
        },
        feature: {
          type: `developer`,
          key: `js-widgets-roster`
        }
      }
    ];

    let activityTypes = DEFAULT_ACTIVITY_TYPES;
    if (typeof props.customActivityTypes === `object`) {
      activityTypes = activityTypes.concat(props.customActivityTypes);
    }
    props.storeActivityTypes(activityTypes);
  }

  componentWillMount() {
    this.setup(this.props);
  }

  componentWillReceiveProps(nextProps) {
    const {
      call,
      spaceDetails,
      activityTypes,
      initialActivity
    } = nextProps;
    this.setup(nextProps);
    const props = this.props;
    const prevCall = props.call;
    // Switch to Meet if ringing
    if (call && !prevCall) {
      nextProps.updateActivityType(`meet`);
    }

    // Reset back to message view after call ends
    if (prevCall && !call) {
      nextProps.updateActivityType(`message`);
    }

    // Set the initial activity once we get space details
    if (!props.spaceDetails && spaceDetails) {
      if (activityTypes.find((a) => a.name === initialActivity)) {
        props.updateActivityType(initialActivity);
      }
      else {
        props.updateActivityType(DEFAULT_ACTIVITY);
      }
    }


  }

  shouldComponentUpdate(nextProps) {
    return nextProps !== this.props;
  }

  componentWillUnmount() {
    this.props.removeWidget();
  }

  @autobind
  setup(props) { // eslint-disable-line complexity
    const {
      conversation,
      errors,
      spaceId,
      sparkInstance,
      sparkState,
      toPersonEmail,
      toPersonId,
      mercury,
      metrics,
      users,
      spaceDetails,
      widgetSpace,
      widgetStatus
    } = props;
    const {formatMessage} = props.intl;

    const currentUserId = users.get(`currentUserId`);
    const toPerson = widgetSpace.get(`toPerson`);


    if (sparkInstance && sparkState.get(`authenticated`) && sparkState.get(`registered`) && !sparkState.get(`hasError`)) {

      if (!widgetStatus.get(`isFetchingSpaceDetails`) && !errors.get(`hasError`) && !spaceDetails) {
        if (spaceId) {
          props.getSpaceDetails(sparkInstance, spaceId, props.intl);
        }
        // Hack until we find a way to get a one-on-one space's details before loading conversation
        else if (toPersonEmail || toPersonId) {
          props.storeSpaceDetails({
            type: `direct`
          });
        }
      }

      this.getFeatureFlags(props);

      const toSelfErrorId = `space.error.toSelf`;
      if (toPerson && currentUserId && (!errors.get(`hasError`) || !errors.get(`errors`).has(toSelfErrorId))) {
        // Check for to user being self
        const currentUser = users.getIn([`items`, currentUserId]);
        if ([currentUser.id, currentUser.email].includes(toPerson)) {
          props.addError({
            id: toSelfErrorId,
            displayTitle: formatMessage(messages.unableToLoad),
            displaySubtitle: formatMessage(messages.errorToSelf),
            temporary: false
          });
        }
      }

      // Setup Web Sockets
      if (!mercury.getIn([`status`, `hasConnected`])
        && !mercury.getIn([`status`, `isConnecting`])
        && !mercury.getIn([`status`, `isConnected`])
        && sparkInstance.internal.device.registered) {
        props.connectToMercury(sparkInstance);
      }

      if (conversation.get(`id`)) {
        metrics.sendEndMetric(metricEvents.WIDGET_LOAD);
        props.fetchAvatar({space: conversation.toJS()}, sparkInstance);
      }

    }
  }

  @autobind
  getFeatureFlags(props) {
    const {
      widgetSpace,
      widgetStatus
    } = props;
    if (widgetStatus.get(`hasFetchedFeatureFlags`) || widgetStatus.get(`isFetchingFeatureFlags`)) {
      return;
    }
    props.updateWidgetStatus({isFetchingFeatureFlags: true});
    widgetSpace.get(`activityTypes`).toJS().forEach((activityType) => {
      if (!activityType.feature) {
        return;
      }
      props.getFeature(activityType.feature.type, activityType.feature.key, props.sparkInstance);
    });
    props.updateWidgetStatus({hasFetchedFeatureFlags: true, isFetchingFeatureFlags: false});
  }

  @autobind
  handleActivityChange(activity) {
    if (activity.type === ACTIVITY_TYPE_PRIMARY) {
      this.props.updateActivityType(activity.name);
    }
    else {
      this.props.updateSecondaryActivityType(activity.name);
    }
  }

  @autobind
  handleSecondaryDismiss() {
    this.props.updateSecondaryActivityType(null);
  }

  @autobind
  handleMenuClick() {
    this.props.toggleActivityMenuVisible();
  }

  /**
   * Builds widget elements from activityTypes list
   *
   * @param {List} activityTypes Immutable List of activity types
   * @param {String} primaryActivityType Active activity type
   * @returns Array of Widget elements
   */
  @autobind
  constructActivityWidgets(activityTypes, primaryActivityType) {
    return activityTypes
      .filter((activityType) => activityType.type !== ACTIVITY_TYPE_SECONDARY)
      .map((a) => {
        // Only allow widget if it's available for this space type
        const Widget = a.component;
        const isVisible = primaryActivityType === a.name ? `` : styles.hidden;
        return (
          <div
            className={classNames(`ciscospark-${a.name}-wrapper`, styles.activityComponentWrapper, isVisible)}
            key={a.name}
          >
            <Widget
              {...this.props}
              eventNames={eventNames}
              injectProvider={false}
              toPerson={this.props.spaceDetails.get(`toPerson`)}
            />
          </div>
        );
      });
  }

  /**
   * Builds secondary widget elements
   *
   * @param {List} activityTypes
   * @param {String} secondaryActivityType
   */
  @autobind
  constructSecondaryActivityWidget(activityTypes, secondaryActivityType) {
    if (!secondaryActivityType) {
      return null;
    }
    return activityTypes
      .filter((activityType) => activityType.type === ACTIVITY_TYPE_SECONDARY && activityType.name === secondaryActivityType)
      .map((activityType) => {
        const Widget = activityType.component;
        return (
          <div
            className={classNames(`ciscospark-secondary-widget`, styles.secondaryWidget)}
            key={activityType.name}
          >
            <Widget
              {...this.props}
              {...activityType.props}
              eventNames={eventNames}
              injectProvider={false}
            />
          </div>
        );
      });
  }

  render() {
    const props = this.props;
    const {
      activityTypes,
      media,
      sparkInstance,
      spaceDetails,
      widgetSpace,
      widgetStatus
    } = props;

    const {formatMessage} = props.intl;

    if (sparkInstance && spaceDetails) {
      // Construct widgets
      const primaryActivityType = widgetSpace.get(`primaryActivityType`);
      const secondaryActivityType = widgetSpace.get(`secondaryActivityType`);
      const widgets = this.constructActivityWidgets(activityTypes, primaryActivityType);
      const secondaryWidget = this.constructSecondaryActivityWidget(activityTypes, secondaryActivityType);
      const spaceTitle = spaceDetails.get(`title`) || `Loading...`;
      const spaceAvatar = spaceDetails.get(`avatar`);
      const callStartTime = media.get(`callStartTime`);
      return (
        <div className={classNames(`ciscospark-space-widget`, styles.spaceWidget)}>
          {
            widgetStatus.get(`activityMenuVisible`) &&
            <div className={classNames(`ciscospark-activity-menu-wrapper`, styles.activityMenuWrapper)}>
              <ActivityMenu
                activityTypes={activityTypes}
                onChange={this.handleActivityChange}
                onExit={this.handleMenuClick}
              />
            </div>
          }
          {
            secondaryWidget
          }
          <div className={classNames(`ciscospark-title-bar-wrapper`, styles.titleBarWrapper)}>
            <TitleBar image={spaceAvatar} name={spaceTitle}>
              {
                callStartTime &&
                <div className={classNames(`ciscospark-title-bar-call-timer`, styles.callTimer)}>
                  <Timer startTime={callStartTime} />
                </div>
              }
              <div className={classNames(`ciscospark-activity-menu-button-wrapper`, styles.activityMenuButtonWrapper)}>
                <div className={classNames(`ciscospark-activity-menu-button`, styles.activityMenuButton)}>
                  <Button accessibilityLabel={`Main Menu`} iconType={ICON_TYPE_WAFFLE} onClick={this.handleMenuClick} />
                </div>
              </div>
            </TitleBar>
          </div>
          <div className={classNames(`ciscospark-widget-body`, styles.widgetBody)}>
            {widgets}
          </div>
        </div>
      );
    }

    return <LoadingScreen loadingMessage={formatMessage(messages.loadingMessage)} />;
  }
}

const injectedPropTypes = {
  activityTypes: PropTypes.array,
  call: PropTypes.object,
  conversation: PropTypes.object,
  errors: PropTypes.object,
  media: PropTypes.object,
  mercury: PropTypes.object,
  sparkInstance: PropTypes.object,
  users: PropTypes.object,
  widgetSpace: PropTypes.object,
  addError: PropTypes.func,
  connectToMercury: PropTypes.func,
  fetchAvatar: PropTypes.func,
  getFeature: PropTypes.func,
  getSpaceDetails: PropTypes.func,
  removeError: PropTypes.func,
  storeActivityTypes: PropTypes.func,
  storeSpaceDetails: PropTypes.func,
  toggleActivityMenuVisible: PropTypes.func,
  updateActivityType: PropTypes.func,
  updateSecondaryActivityType: PropTypes.func,
  updateWidgetStatus: PropTypes.func
};

export const ownPropTypes = {
  customActivityTypes: PropTypes.object,
  initialActivity: PropTypes.string,
  muteNotifications: PropTypes.bool,
  spaceId: PropTypes.string,
  startCall: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.bool
  ]),
  toPersonEmail: PropTypes.string,
  toPersonId: PropTypes.string
};

SpaceWidget.propTypes = {
  ...injectedPropTypes,
  ...ownPropTypes
};

SpaceWidget.defaultProps = {
  initialActivity: DEFAULT_ACTIVITY
};

function mapStateToProps(state, props) {
  return getSpaceWidgetProps(state, props);
}

export default connect(
  mapStateToProps,
  (dispatch) => bindActionCreators({
    addError,
    connectToMercury,
    getFeature,
    getSpaceDetails,
    fetchAvatar,
    getCurrentUser,
    getSpaceWidgetProps,
    removeError,
    storeActivityTypes,
    storeSpaceDetails,
    toggleActivityMenuVisible,
    updateActivityType,
    updateSecondaryActivityType,
    updateWidgetStatus
  }, dispatch)
)(SpaceWidget);
