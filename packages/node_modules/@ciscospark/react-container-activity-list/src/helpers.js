import {filterSync} from '@ciscospark/helper-html';

import defaultFormatters from './formatters';

export const VISIBLE_ACTIVITY_VERBS = {
  tombstone: {},
  share: {
    objectTypes: ['content']
  },
  post: {
    objectTypes: ['comment']
  },
  create: {
    objectTypes: ['conversation']
  },
  update: {
    objectTypes: ['locusSessionSummaryParticipant', 'locusSessionSummary']
  },
  add: {
    objectTypes: ['person']
  },
  leave: {
    objectTypes: ['person']
  }
};

/**
 * Determines if an activity object is a visible activity
 * @param {object} activity
 * @returns {bool}
 */
export function isActivityVisible(activity) {
  if (!Object.prototype.hasOwnProperty.call(VISIBLE_ACTIVITY_VERBS, activity.verb)) {
    return false;
  }
  const verb = VISIBLE_ACTIVITY_VERBS[activity.verb];
  if (verb.objectTypes) {
    if (verb.objectTypes.indexOf(activity.object.objectType) === -1) {
      return false;
    }
  }
  return true;
}

/**
 * Applies safe filters activity content
 *
 * @param {Object} activityObject raw activity.object
 * @returns {Object}
 */

export function filterActivity(activityObject) {
  const outputActivity = Object.assign({}, activityObject);
  if (outputActivity.content) {
    outputActivity.content = filterSync(() => {}, {
      'spark-mention': ['data-object-type', 'data-object-id', 'data-object-url'],
      a: ['href'],
      b: [],
      blockquote: ['class'],
      strong: [],
      i: [],
      em: [],
      pre: [],
      code: ['class'],
      br: [],
      hr: [],
      p: [],
      ul: [],
      ol: [],
      li: [],
      h1: [],
      h2: [],
      h3: [],
      h4: [],
      h5: [],
      h6: []
    }, [], outputActivity.content)
      .replace(/\n/g, '');
  }
  return outputActivity;
}

/**
 * Applies additional formatting to activity
 *
 * @export
 * @param {Object} activityObject
 * @returns {Object}
 */

export function formatActivity({activity, formatter, onEvent}) {
  const activityObject = filterActivity(activity);

  if (typeof activityFormatter === 'function') {
    return formatter({
      activity: activityObject,
      formatter: defaultFormatters,
      onEvent
    });
  }
  return defaultFormatters(activityObject, onEvent);
}
