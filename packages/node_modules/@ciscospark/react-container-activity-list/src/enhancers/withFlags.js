import {compose, lifecycle, withHandlers} from 'recompose';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';

import {
  fetchFlags,
  flagActivity,
  removeFlagFromServer
} from '@ciscospark/redux-module-flags';

/**
 * Listens for mercury buffer state events and
 * fires off actions based on them
 * @param {object} props
 */
function getFlags(props) {
  const {
    flags,
    sparkInstance,
    space
  } = props;

  if (space &&
    !flags.getIn(['status', 'hasFetched']) &&
    !flags.getIn(['status', 'isFetching'])) {
    props.fetchFlags(sparkInstance);
  }
}

/**
 * Flag or unflag activity by Id
 *
 * @param {object} props
 * @returns {function}
 */
function handleActivityFlag(props) {
  return (activityId) => {
    const {
      activities,
      flags,
      sparkInstance
    } = props;
    const activity = Object.values(activities).find((act) => act.id === activityId);
    if (activity) {
      const foundFlag = flags.getIn(['flags', activity.url]);
      if (foundFlag) {
        props.removeFlagFromServer(sparkInstance, foundFlag);
      }
      else {
        props.flagActivity(sparkInstance, activity);
      }
    }
  };
}

export default compose(
  connect(
    null,
    (dispatch) => bindActionCreators({
      fetchFlags,
      flagActivity,
      removeFlagFromServer
    }, dispatch)
  ),
  withHandlers({
    onActivityFlag: handleActivityFlag
  }),
  lifecycle({
    componentDidMount() {
      getFlags(this.props);
    },
    componentWillReceiveProps(nextProps) {
      getFlags(nextProps);
    }
  })
);
